"""
Django settings for django_Q project.

Generated by 'django-admin startproject' using Django 1.11.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'n8hlt=)d+eo0q5i45pv6!1e640v+-igq7ar4_!w5*&3g=)k&qz'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
<<<<<<< HEAD
    'app01',
    'FormValidation',
    'CookiesAndSession',
=======
    # 'app01',
    # 'FormValidation',
    # 'CookiesOpt',
    # 'Session',
    # 'Middleware',
    # 'Cache',
    'Signals'
>>>>>>> f84ab62c585cc6e6a1d18f70d7b8b21f439940f0
]


MIDDLEWARE = [
    # 中间件位于所有url请求的最前端。按列表中的顺序从上到下执行。
    # 当数据返回客户端时，数据按列表中的顺序由下往上返回。
    # 'Middleware.my_middleware.TestMiddleware1', # 自定义中间件
    # 'Middleware.my_middleware.TestMiddleware2', # 自定义中间件
    # 'Middleware.my_middleware.TestMiddleware3', # 自定义中间件
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_Q.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_Q.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {

    # 'default': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': 'booktest',
    #     'USER': 'root',
    #     'PASSWORD': '123456',
    #     'HOST': '192.168.21.131',
    #     'PORT': '3306',
    #     }

    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }

    # mysql的Django配置
    # 'default': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': 'booktest',
    #     'USER': 'root',
    #     'PASSWORD': '123456',
    #     'HOST': '192.168.20.131',
    #     'PORT': '3306',
    # }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

# 指定静态文件的路径
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)


#===============================缓存配置=============================

# 此缓存将内容保存至内存的变量中
# 配置：
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
#         'LOCATION': 'unique-snowflake',
#     }
# }

# 此缓存将内容保存至文件
# 配置：
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
#         'LOCATION': os.path.join(BASE_DIR, 'Cache/cachefiles'), # 缓存文件的路径。
#     }
# }


# 此缓存将内容保存至数据库中，系统目前使用的数据库。
# 配置：
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'my_cache_table', # 数据库表名,需要使用 python manage.py createcachetable 命令来创建此表。
    }
}


# 此缓存使用python-memcached模块连接memcache

# 第一种方式：无memcached集群
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
#         'LOCATION': '192.168.21.131:11211',
#     }
# }

# # 第二种方式：本地socket文件.
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
#         'LOCATION': 'unix:/tmp/memcached.sock',
#     }
# }
#
# # 第三种方式：memcached集群
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
#         'LOCATION': [
#             '172.19.26.240:11211',
#             '172.19.26.242:11211',
#         ]
#     }
# }
